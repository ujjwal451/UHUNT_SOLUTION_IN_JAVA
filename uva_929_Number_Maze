package Graph_problem;

import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Number_Maze {

	public static int dx[], dy[], dist[][], a[][];

	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);

		int t = in.nextInt();
		while (t-- > 0) {
			int n = in.nextInt();
			int m = in.nextInt();
			a = new int[n][m];
			dist = new int[n][m];

			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					a[i][j] = in.nextInt();
					dist[i][j] = Integer.MAX_VALUE;
				}
			}
			dist[0][0] = a[0][0];
			dx = new int[] { -1, 0, 0, 1 };
			dy = new int[] { 0, -1, 1, 0 };
			Dijkshtra(n, m);

		}

	}

	public static void Dijkshtra(int n, int m) {

		HashMap<Integer, Integer> map = new HashMap<>();
		PriorityQueue<Cell> pq = new PriorityQueue<>();

		pq.offer(new Cell(0, 0, dist[0][0]));
		while (!pq.isEmpty()) {
			Cell c = pq.poll();
			if (c.row == n - 1 && c.col == m - 1) {
				System.out.println(dist[n - 1][m - 1]);
				break;
			}
			for (int i = 0; i < 4; i++) {
				int at = c.row + dx[i];
				int bt = c.col + dy[i];
				if (at >= 0 && at < n && bt >= 0 && bt < m && a[at][bt] + dist[c.row][c.col] < dist[at][bt]) {
					dist[at][bt] = a[at][bt] + dist[c.row][c.col];
					pq.add(new Cell(at, bt, dist[at][bt]));
				}
			}
		}
	}

	static class Cell implements Comparable<Cell> {

		int cost, row, col;

		public Cell(int row, int col, int cost) {
			this.row = row;
			this.col = col;
			this.cost = cost;
		}

		public int compareTo(Cell o) {
			return cost - o.cost;
		}
	}
}
