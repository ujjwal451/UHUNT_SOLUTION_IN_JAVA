package Graph_problem;

import java.util.*;
import java.io.*;

public class Nominating_Group_Leader {

	public static triplet q[];
	public static int ans[], v[], hot;
	public static final int block = 555;
	public static HashMap<Integer, Integer> tmap;
	public static TreeSet<Integer> help[];

	public static void main(String[] args) {

		FastReader in = new FastReader();
		PrintWriter pw = new PrintWriter(System.out);

		int t = in.nextInt();
		while (t-- > 0) {
			int n = in.nextInt();
			tmap = new HashMap<>();
			v = new int[n];
			help = new TreeSet[n + 1];

			for (int i = 0; i < n; i++) {
				v[i] = in.nextInt();
				help[i] = new TreeSet<>();

			}
			help[n] = new TreeSet<>();

			int g = in.nextInt();
			q = new triplet[g];

			ans = new int[g];
			for (int i = 0; i < g; i++) {
				q[i] = new triplet();
				q[i].l = in.nextInt();
				q[i].r = in.nextInt();
				q[i].x = in.nextInt();
				q[i].i = i;

			}

			Arrays.sort(q);
			MOS();

			for (int i = 0; i < q.length; i++) {
				pw.println(block+" "+q[i].l+" " +q[i].r+" " +q[i].x+" " +ans[i]);
			}

		}
		pw.flush();

	}

	public static void add(int i) {

		if (tmap.containsKey(v[i])) {
			int val = tmap.get(v[i]);

			tmap.put(v[i], val + 1);
			help[val + 1].add(v[i]);
			help[val].remove(v[i]);
		} else {
			tmap.put(v[i], 1);
			help[1].add(v[i]);
		}

	}

	public static void remove(int i) {

		Integer val = tmap.get(v[i]);

		if (tmap.containsKey(v[i])) {
			if (val != null) {
				tmap.put(v[i], val - 1);
				help[val - 1].add(v[i]);
				help[val].remove(v[i]);
			}
		}

	}

	public static void MOS() {

		int currentL = 0, currentR = 0, answer = 0;

		for (int i = 0; i < q.length; i++) {
			int L = q[i].l, R = q[i].r;
			while (currentL < L) {
				remove(currentL);
				currentL++;
			}
			while (currentL > L) {
				add(currentL - 1);
				currentL--;
			}
			while (currentR <= R) {
				add(currentR);
				currentR++;
			}
			while (currentR > R + 1) {
				remove(currentR - 1);
				currentR--;
			}

			
			if(help[q[i].x].size() !=0 ){
			
				ans[q[i].i] = help[q[i].x].first();
			}
			else{
				ans[q[i].i] = -1;
			}
//			System.out.println(help[q[i].x]);
//			System.out.println(block+" "+q[i].l+" " +q[i].r+" " +q[i].x+" " +q[i].i+" "+ans[q[i].i]);

			

		}

	}

	public static class triplet implements Comparable<triplet> {

		int l;
		int r;
		int x;
		int i;

		triplet() {

		}

		@Override
		public int compareTo(triplet o) {
			if (this.l / block != o.l / block) {
				return this.l / block - o.l / block;
			} else {
				return this.r- o.r;

			}
		}

	}

	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}

}
