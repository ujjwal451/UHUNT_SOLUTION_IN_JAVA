package Graph_problem;

import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Vector;

public class SENDING_EMAILS {

	public static Vector<pair> adj[];

	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		int cs=0;
		while (t-- > 0) {
			int n = in.nextInt();
			int m = in.nextInt();
			int a = in.nextInt();
			int b = in.nextInt();
			adj = new Vector[n];

			for (int i = 0; i < n; i++) {
				adj[i] = new Vector<>();
			}
			for (int i = 0; i < m; i++) {
				int x = in.nextInt();
				int y = in.nextInt();
				int w = in.nextInt();
				pair p = new pair(y, w);
				adj[x].addElement(p);
				pair p2 = new pair(x, w);
				adj[y].addElement(p2);
			}

			HashMap<Integer, Integer> map = new HashMap<>();
			map = Dijkshtra(a);
			System.out.print("Case #"+(++cs)+": ");
			if (map.get(b) == 1000000) {
				System.out.println("unreachable");
			} else {
				System.out.println(map.get(b));
			}

		}
	}

	public static class pair {
		int e;
		int w;

		pair(int e, int w) {

			this.e = e;
			this.w = w;

		}
	}

	public static class prior implements Comparable<prior> {
		int v;
		int val;

		@Override
		public int compareTo(prior o) {

			return this.val - o.val;
		}

	}

	public static HashMap<Integer, Integer> Dijkshtra(int source) {

		HashMap<Integer, Integer> map = new HashMap<>();
		PriorityQueue<prior> pq = new PriorityQueue<>();

		for (int i = 0; i < adj.length; i++) {
			prior p = new prior();
			p.v = i;
			if (i == source) {
				p.val = 0;
				pq.offer(p);
				map.put(i, 0);

			} else {
				p.val = 1000000;
				pq.offer(p);

				map.put(i, 1000000);
			}

		}
		while (!pq.isEmpty()) {
			prior dist = pq.poll();
			// System.out.println(vtx);
			int vtx = dist.v;
			int d = dist.val;

			if (d > map.get(vtx))
				continue;
			else {
//				System.out.println(vtx);
				 for (int i = 0; i < adj[vtx].size(); i++) {
				 int oldscore = map.get(adj[vtx].get(i).e);
				 int newScore = map.get(vtx) + adj[vtx].get(i).w;
				
				 if (newScore < oldscore) {
				 prior p = new prior();
				 p.v = adj[vtx].get(i).e;
				 p.val = newScore;
				 pq.offer(p);
				 map.put(adj[vtx].get(i).e, newScore);
				 }
				 }
			}
		}
		return map;
	}
}
